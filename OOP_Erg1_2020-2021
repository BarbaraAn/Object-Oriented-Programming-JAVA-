import java.util.Scanner;
/**
 *
 * @author Barbara Angelopoulou
 */
public class Main {
    static int length = 0;
    // created Scanner object for system input
    static Scanner sc = new Scanner(System.in);
    public static void main(String[] args) {
    //Created here to be used in all methods of class "Main"
    Book[] TB = new Book[10];
    //counter of books in table TB
   
        int selection;
        
        do{
            //print menu
            System.out.println("Λίστα Επιλογών" + "\n1. Εισαγωγή στοιχείων βιβλίου" + "\n2. Αναζήτηση βιβλίου" + "\n3. Εμφάνιση στοιχείων με τιμή μεταξύ κάποιων ορίων" + "\n4. Εμφάνιση στοιχείων όλων των βιβλίων" + "\n5. Τέλος");
            //user input
            System.out.print("Δώσε μια επιλογή: ");
            selection = sc.nextInt();
            //switch for options 1-5 and false 
            switch(selection){
                //used if to check if table TB has empty seats 
                case 1: if(length <10){
                   TB[length] = newBook();
                   length++;
                }
                else{
                    //TB table full message
                    System.out.println("Αδυναμία καταχώρισης βιβλίου λόγω ελειψής θέσεων στον πίνακα");
                }
                break;
                case 2:if(length > 0){
                    searchBook(TB,length);
                }
                else{
                    System.out.println("Αδυναμία αναζήτησης βιβλίου λόγω ελειψής καταχωρήσεων στον πίνακα");
                }
                break;
                case 3:if(length > 0){
                    searchBookByPrice(TB,length);
                } 
                else{
                    System.out.println("Αδυναμία αναζήτησης βιβλίου λόγω ελειψής καταχωρήσεων στον πίνακα");
                }
                break;
                case 4:seeTB(length,TB);
                break;
                //selection to end the program
                case 5: 
                break;
                //wrong input message
                default: System.out.println("\nΜη έγκυρη επιλογή \n");  
            }      
        } while(selection != 5);
        
    }
    
    public static Book newBook(){
        System.out.println("\nΚαταχώρηση βιβλίου");
        System.out.print("Ονομα βιβλίου: ");
        String bookName = sc.next();
        System.out.print("Ονομα συγγραφέα: ");
        String bookWriter = sc.next();
        
        boolean flag = true;
        int bookYear;
        String bookISBN;
        do{
            System.out.print("Ετος έκδοσης βιβλίου: ");
            bookYear = sc.nextInt();
            
            //year check (4 symbols)
            if(bookYear < 9999 && bookYear >= 1967 ){ 
                //first ISBN used in 1967
                flag = false;    
            }
            //error message 
            else{
                System.out.println("Λάθος έτος έκδοσης βιβλίου, παρακαλώ εισάγετε ξανά ");
            }
        }while(flag);
       
        
       //
        do{
            System.out.print("Κωδικός ISBN: ");
            bookISBN = sc.next();
            flag = correctISBN(bookISBN, bookYear);
        }while(flag);
        
        
        System.out.print("Ονομα εκδοτικού οίκου: ");
        String bookPublisher = sc.next();
        System.out.print("Αριθμός σελιδών βιβλίου: ");
        int bookPages = sc.nextInt();
        System.out.print("Τίμη βιβλίου: ");
        double bookPrice = sc.nextDouble();
        //create book on table 
        Book temp = new Book(bookName,bookWriter,bookISBN,bookPublisher,bookPages,bookYear,bookPrice); 
        return temp; 
    }
    
    
    public static boolean correctISBN(String bookISBN,  int bookYear ){
        int sum = 0;
        //check for ISBN with 10 symbols
        if (bookYear < 2007){
           if(bookISBN.length()== 10){
               int x = 10;
               for(int i=0; i<10; i++){
                   sum = sum + (bookISBN.charAt(i)* x);
                   x--;
               }
               //
               if(sum%11 == 0){
                   return false;
               }
               else{
                  System.out.println("μη έγκυρος κωδικός ISBN  , παρακαλώ εισάγετε ξανά ");
               }
            
           } 
           else{
               System.out.println("O κωδικός ISBN θα έπρεπε να έχει 10 ψηφία , παρακαλώ εισάγετε ξανά ");
           }
        }
        //check for ISBN with 13 symbols
        else if (bookYear >= 2007){
            if(bookISBN.length()== 13){
               int x = 1; 
               for(int i=0; i<13; i++){
                  sum = sum + (bookISBN.charAt(i)* x);
                  if(x==1){
                      x=3;    
                  } 
                  else{
                      x=1;
                  }
               }
               //
               if(sum%10 == 0){
                   return false;
               }
               else{
                  System.out.println("μη έγκυρος κωδικός ISBN  , παρακαλώ εισάγετε ξανά ");
               }
           } 
           else{
               System.out.println("O κωδικός ISBN θα έπρεπε να έχει 13 ψηφία , παρακαλώ εισάγετε ξανά ");
           }
        }
        
        
        
        return true;
    }
    
    public static void searchBook(Book[] TB,  int length){
            System.out.println("\nΕπιλογή πεδίου αναζήτησης " + "\n1.ISBN" + "\n2. Ετος κυκλοφορίας" +"\n3. Επιστροφή στην Αρχική επιλογή");
            int select = sc.nextInt();
            //search book per ISBN
            if(select == 1){
                int select2;
                do{
                    System.out.println("\nΕπιλογή μεθόδου αναζήτησης " + "\n1.Σειριακή αναζήτηση " + "\n2. Δυαδική αναζήτηση (Προσοχή ο πίνακας πρέπει να είναι ταξινομημένος κατά το πεδίο αναζήτησης)" +"\n3.  Επιστροφή στην επιλογή πεδίου αναζήτησης");
                    select2 = sc.nextInt();
                    //seatch with seqSearch 
                    if(select2 == 1){
                        System.out.println("\nΚαταχώρησε τον κωδικό ISBN του βιβλίου που θέλετε: ");
                        String x = sc.next();
                        int i = MyUtils.seqSearch(TB,x,length);
                        //print book or error message
                        if(i != -1){
                            System.out.println(TB[i]);
                        }
                        else{

                           System.out.println("Το βιβλίο που αναζητάτε δεν βρέθηκε");
                        }
                    }
                    //seatch with binSearch     
                    else if(select2 == 2){
                        System.out.println("\nΚαταχώρησε τον κωδικό ISBN του βιβλίου που θέλετε: ");
                        String x = sc.next();
                        int i = MyUtils.binSearch(TB,x,length);
                         //print book or error message
                        if(i != -1){
                            System.out.println(TB[i]);
                        }
                        else{

                           System.out.println("Το βιβλίο που αναζητάτε δεν βρέθηκε");
                        }
                    }
                    //back to menu 2
                    else if(select2 == 3){

                    }
                    //error 404 selection not found
                    else{
                      System.out.println("μη έγκυρη επιλογή  , παρακαλώ εισάγετε ξανά "); 
                    }
                }while(select2 <1 || select2 >3);   
            }
          
            //search book per year
            else if(select == 2){
                    int select2;
                    do{
                        System.out.println("\nΕπιλογή μεθόδου αναζήτησης " + "\n1.Σειριακή αναζήτηση " + "\n2. Δυαδική αναζήτηση (Προσοχή ο πίνακας πρέπει να είναι ταξινομημένος κατά το πεδίο αναζήτησης)" +"\n3.  Επιστροφή στην επιλογή πεδίου αναζήτησης");
                        select2 = sc.nextInt();
                        //seatch with seqSearch 
                        if(select2 == 1){
                            System.out.println("\nΚαταχώρησε το έτος έκδοσης του βιβλίου που θέλετε: ");
                            int y = sc.nextInt();
                            int i = MyUtils.seqSearch(TB,y,length);
                            //print book or error message
                            if(i != -1){
                                System.out.println(TB[i]);
                            }
                            else{

                               System.out.println("Το βιβλίο που αναζητάτε δεν βρέθηκε");
                            }
                        }
                        //seatch with binSearch     
                        else if(select2 == 2){
                            System.out.println("\nΚαταχώρησε το έτος έκδοσης του βιβλίου που θέλετε: ");
                            int y = sc.nextInt();
                            int i = MyUtils.binSearch(TB,y,length);
                             //print book or error message
                            if(i != -1){
                                System.out.println(TB[i]);
                            }
                            else{

                               System.out.println("Το βιβλίο που αναζητάτε δεν βρέθηκε");
                            }
                        }
                        //back to menu 2
                        else if(select2 == 3){

                        }
                        else{
                          System.out.println("μη έγκυρη επιλογή  , παρακαλώ εισάγετε ξανά "); 
                        }
                    }while(select2 <1 || select2 >3);   
                }
                //back to menu 1
                else if(select == 3){
              
                }
                //error 404 selection not found
                else{
                    System.out.println("μη έγκυρη επιλογή  , παρακαλώ εισάγετε ξανά ");
                    //Recursion instead of do while
                    searchBook(TB,length);
                }
        
    }
    
    public static void searchBookByPrice(Book[] TB,int length){
        System.out.println("\nΚαταχώρησε την ελάχιστη τιμή: ");
        double minPrice = sc.nextDouble();
        System.out.println("\nΚαταχώρησε την μέγιστη τιμή: ");
        double maxPrice = sc.nextDouble(); 
        MyUtils.valueSearch(TB, minPrice, maxPrice,length);
        
    }
    
    
    public static void seeTB(int length,Book TB[]){
        if(length > 0){
            for(int i=0; i<length; i++){
                System.out.println(TB[i]);
            }
        }
        else{
             System.out.println("Δεν υπάρχουν βιβλία στον πίνακα");
        }
            
    }
        
    
}



public class Book {
    
    //fields
    private String BookTitle, NameWriter, ISBN, Publisher ;
    private int PagesNumber, Year;
    private double Price; 
    
    //Constructor
    public Book (){}
    public Book (String bt,String nw, String isbn, String p, int pn, int y, double pr){
        this.BookTitle = bt;
        this.NameWriter = nw;
        this.ISBN = isbn;
        this.Publisher = p;
        this.PagesNumber = pn;
        this.Year = y;
        this.Price = pr;
    }
    
    //Getters
    public String getBookTitle(){
        return this.BookTitle;
    }
    
    public String getNameWriter(){
        return this.NameWriter;
    }
    
    public String getISBN(){
        return this.ISBN;
    }
    
    public String getPublisher(){
        return this.Publisher;
    }
    
    public int getPagesNumber(){
        return this.PagesNumber;
    }
     
    public int getYear(){
        return this.Year;
    }
     
    public double getPrice(){
        return this.Price;
    }
    
    //Setters
    public void setBookTitle(String bt){
        this.BookTitle = bt;
    }
    
    public void setNameWriter(String nw){
        this.NameWriter = nw;
    }
    
    public void setISBN(String isbn){
        this.ISBN = isbn;
    }
    
    public void setPublisher(String p){
        this.Publisher = p;
    }
    
    public void setPagesNumber(int pn){
        this.PagesNumber = pn;
    }
     
    public void setYear(int y){
        this.Year = y;
    }
     
    public void setPrice(double pr){
        this.Price = pr;
    }
    
    //toString , Print Book info 
    public String toString(){
        return "Book Title: " + this.BookTitle + "\nBook Writer: " + this.NameWriter + "\nISBN: " + this.ISBN + "\nPublisher: " + this.Publisher + "\nYear: " + this.Year + "\nPrice: " + this.Price ;
    }
}




public class MyUtils {
   //search book per ISBN 
    public static int seqSearch(Book[] Tbook,String x, int length){
        for(int i=0; i<length; i++ ){
            //equals method used instead of "Tbook[i].getISBN()== x"
            /* equals method returns 
               true if first string == second string
               false if first string != second string */
            if(Tbook[i].getISBN().equals(x)){
               return i;  
            }
        }
        return -1;
    } 
    //search book per year
    public static int seqSearch(Book[] Tbook ,int x, int length){
        for(int i=0; i<length; i++ ){
            if(x == Tbook[i].getYear()){
               return i;  
            }
        }
        return -1;
    } 
    
    
   //search book per year
    public static int binSearch(Book[] Tbook, int key, int length){
        int first = 0;
        int last = length;
        int mid = (first + last)/2;
        while(first <= last ){
            if (Tbook[mid].getYear()< key ){
                first = mid + 1;
            } 
            else if (Tbook[mid].getYear() == key ){
                return mid;
            }
            else{
                last = mid - 1;
            }
        mid = (first + last)/2;
        }
        return -1;
    }    
    
   //search book per ISBN (works)
    public static int binSearch(Book[] Tbook, String key, int length){
        int first = 0;
        int last = length;
        int mid = (first + last)/2;
        while( first <= last ){
            //compareTo method used instead of "Tbook[mid].getISBN() < key"
            /* CompareTo method returns 
               0 if strings are equal
               1 if first string > second string
               -1 if first string < second string */
            if (Tbook[mid].getISBN().compareTo(key) <0){
                first = mid + 1;
            }
            //equals method used instead of "Tbook[mid].getISBN()== key"
            /* equals method returns 
               true if first string == second string
               false if first string != second string */
            else if (Tbook[mid].getISBN().equals(key)){
                return mid;
            }
            else{
                last = mid - 1;
            }
        mid = (first + last)/2;
        }
        return -1;
    }
    
    public static void valueSearch(Book[] Tbook,double min, double max, int length){
        for(int i=0; i<length; i++ ){
            if(Tbook[i].getPrice() >= min){
                if(Tbook[i].getPrice() <= max){
                   System.out.println(Tbook[i].toString());
                }
            }
        }
    }
    
    
}

